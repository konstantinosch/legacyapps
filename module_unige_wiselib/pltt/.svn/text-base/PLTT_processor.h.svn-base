#ifndef __SHAWN_LEGACYAPPS_MODULE_UNIGE_WISELIB_PLTT_PROCESSOR_H
#define __SHAWN_LEGACYAPPS_MODULE_UNIGE_WISELIB_PLTT_PROCESSOR_H
#include "_legacyapps_enable_cmake.h"
#ifdef ENABLE_MODULE_UNIGE_WISELIB

#include "legacyapps/wiselib/ext_iface_processor.h"
#include "sys/processor.h"
#include "sys/event_scheduler.h"
#include "../wiselib.testing/external_interface/shawn/shawn_os.h"
#include "util/serialization/simple_types.h"
#include "util/pstl/vector_static.h"
#include "internal_interface/node/node_new.h"
#include "internal_interface/position/position_new.h"
#include "algorithms/tracking/PLTT_agent.h"
#include "algorithms/tracking/PLTT_node_target.h"
#include "algorithms/tracking/PLTT_node.h"
#include "algorithms/tracking/PLTT_trace.h"
#include "algorithms/tracking/PLTT_passive_nb.h"
#include "algorithms/tracking/PLTT_tracker.h"
#include "algorithms/tracking/PLTT_trace.h"
#include "algorithms/tracking/PLTT_target.h"
#include "algorithms/neighbor_discovery/echo.h"
#include "algorithms/tracking/PLTT_spread_metrics.h"
#include "algorithms/tracking/PLTT_tracking_metrics.h"
#include "algorithms/tracking/PLTT_reliable_agent.h"
#include <iostream>
#include <sstream>
#include "sys/vec.h"
#include <ctime>
#include <cstdlib>
#include <math.h>


#define MAX_NEIGHBORS_SUPPORTED 100
#define MAX_TARGETS_SUPPORTED 100
#define MAX_TRACKERS_SUPPORTED 100
#define MAX_RELIABLE_AGENTS_SUPPORTED 100

using namespace shawn;
using namespace std;

namespace wiselib
{
	typedef wiselib::ShawnOsModel Os;
	typedef Os::TxRadio Radio;
	typedef Radio::node_id_t node_id_t;
	typedef Radio::ExtendedData ExtendedData;
	typedef Os::Rand Rand;
	typedef Os::Debug Debug;
	typedef Os::Clock Clock;
	typedef Os::Timer Timer;
	typedef Timer::millis_t millis_t;
	typedef double CoordinatesNumber;
	typedef int IntensityNumber;
	typedef int TimesNumber;
	typedef int SecondsNumber;
	typedef unsigned int Integer;
	typedef unsigned int AgentID;
	typedef wiselib::Echo<Os, Radio, Timer, Debug> NeighborDiscovery;
	typedef wiselib::Position2DType<Os, Radio, CoordinatesNumber, Debug> Position;
	typedef wiselib::NodeType<Os, Radio, node_id_t, Position, Debug> Node;
	typedef wiselib::PLTT_AgentType<Os, Radio, AgentID, Node, IntensityNumber, Clock, Debug> PLTT_Agent;
	typedef wiselib::vector_static<Os, PLTT_Agent, MAX_TRACKERS_SUPPORTED> PLTT_AgentList;
	typedef wiselib::PLTT_ReliableAgentType<Os, Radio, PLTT_Agent, Timer, Debug> PLTT_ReliableAgent;
	typedef wiselib::vector_static<Os, PLTT_ReliableAgent, MAX_RELIABLE_AGENTS_SUPPORTED> PLTT_ReliableAgentList;
	typedef wiselib::PLTT_TraceType<Os, Radio, TimesNumber, SecondsNumber, IntensityNumber, Node, node_id_t, Debug> PLTT_Trace;
	typedef wiselib::vector_static<Os, PLTT_Trace, MAX_TARGETS_SUPPORTED> PLTT_TraceList;
	typedef wiselib::PLTT_NodeTargetType<Os, Radio, node_id_t, IntensityNumber, Debug > PLTT_NodeTarget;
	typedef wiselib::vector_static<Os, PLTT_NodeTarget, MAX_TARGETS_SUPPORTED> PLTT_NodeTargetList;
	typedef wiselib::PLTT_NodeType<Os, Radio, Node, PLTT_NodeTarget, PLTT_NodeTargetList, PLTT_TraceList, Debug> PLTT_Node;
	typedef wiselib::vector_static<Os, PLTT_Node, MAX_NEIGHBORS_SUPPORTED> PLTT_NodeList;

	typedef wiselib::PLTT_PassiveSpreadMetricType<node_id_t, Integer> PLTT_PassiveSpreadMetric;
	typedef wiselib::vector_static<Os, PLTT_PassiveSpreadMetric, MAX_TARGETS_SUPPORTED> PLTT_PassiveSpreadMetricList;
	typedef wiselib::PLTT_PassiveSpreadMetricsType<PLTT_PassiveSpreadMetric, PLTT_PassiveSpreadMetricList> PLTT_PassiveSpreadMetrics;
	typedef wiselib::PLTT_PassiveTrackingMetricType<node_id_t, Integer> PLTT_PassiveTrackingMetric;
	typedef wiselib::vector_static<Os, PLTT_PassiveTrackingMetric, MAX_TRACKERS_SUPPORTED> PLTT_PassiveTrackingMetricList;
	typedef wiselib::PLTT_PassiveTrackingMetricsType<PLTT_PassiveTrackingMetric, PLTT_PassiveTrackingMetricList> PLTT_PassiveTrackingMetrics;
	typedef wiselib::PLTT_PassiveType<Os, Node, PLTT_Node, PLTT_NodeList, PLTT_Trace, PLTT_TraceList, PLTT_Agent, PLTT_AgentList, PLTT_ReliableAgent, PLTT_ReliableAgentList, NeighborDiscovery, Timer, Radio, Rand, Clock, PLTT_PassiveSpreadMetrics, PLTT_PassiveTrackingMetrics, Debug> PLTT_Passive;

	typedef wiselib::PLTT_TargetSpreadMetricType<Integer> PLTT_TargetSpreadMetric;
	typedef wiselib::PLTT_TrackerTrackingMetricType<node_id_t, Integer> PLTT_TrackerTrackingMetric;
	typedef wiselib::PLTT_TrackerType<Os, PLTT_Agent, Node, Position, IntensityNumber, Timer, Radio, Rand, Clock, PLTT_TrackerTrackingMetric, Debug> PLTT_Tracker;
	typedef wiselib::PLTT_TargetType<Os, PLTT_Trace, Node, Timer, Radio, Clock, PLTT_TargetSpreadMetric, Debug> PLTT_Target;

	//typedef wiselib::vector_static<Os, PLTT_TargetSpreadMetric, MAX_TARGETS_SUPPORTED>PLTT_TargetSpreadMetricList;
	//typedef wiselib::PLTT_SpreadMetrics_Type<PLTT_TargetSpreadMetric, PLTT_TargetSpreadMetricList>PLTT_SpreadMetrics;
	//typedef wiselib::PLTT_TrackAgentMetric_Type< node_id_t, Integer>PLTT_TrackAgentMetric;
	//typedef wiselib::vector_static<Os, PLTT_TrackAgentMetric, MAX_TRACKERS_SUPPORTED>PLTT_TrackMetricList;
	//typedef wiselib::PLTT_TrackMetrics_Type<PLTT_TrackAgentMetric, PLTT_TrackMetricList>PLTT_TrackMetrics;

	class PLTT_Processor : public virtual ExtIfaceProcessor
	{
	public:
		PLTT_Processor();
		virtual ~PLTT_Processor();
		virtual void boot( void ) throw();
		virtual void work( void ) throw();
		void receive( int from, long len, unsigned char* data, const ExtendedData& exdata ) throw();
		void tags_from_traces( void ) throw();
		void target_waypoint(shawn::Vec);
		void tracker_waypoint( shawn::Vec );
	private:
		PLTT_Passive* passive;
		PLTT_Target* target;
		PLTT_Tracker* tracker;
		NeighborDiscovery* neighbor_discovery;
		ShawnOs os_;
		Radio wiselib_radio_;
		Timer wiselib_timer_;
		Debug wiselib_debug_;
		Rand wiselib_rand_;
		Clock wiselib_clock_;
		int number_of_trackers;
		int number_of_targets;
		shawn::Vec destination;
		int target_movement_round_intervals;
		int tracker_movement_round_intervals;
		double target_movement_distance_intervals;
		double tracker_movement_distance_intervals;
		millis_t target_spread_milis;
		millis_t tracker_spread_milis;
		int target_transmission_power;
		int tracker_transmission_power_as_target;
		SecondsNumber trace_diminish_seconds;
		SecondsNumber tracker_trace_diminish_seconds;
		IntensityNumber trace_diminish_amount;
		IntensityNumber tracker_trace_diminish_amount;
		IntensityNumber trace_start_intensity;
		IntensityNumber tracker_trace_start_intensity;
		IntensityNumber trace_spread_penalty;
		IntensityNumber tracker_trace_spread_penalty;
		CoordinatesNumber network_size_x;
		CoordinatesNumber network_size_y;
		CoordinatesNumber network_size_z;
		int intensity_detection_threshold;
		int reliable_tracking_expiration_time;
		int reliable_tracking_recurring_time;
		int reliable_tracking_daemon_time;
		int target_color;
		node_id_t tracker_id_to_track;
		double tracker_send_milis;
		int tracker_transmission_power;
		int tracker_color;
		IntensityNumber tracker_target_to_track_max_intensity;
	};
}

#endif
#endif

